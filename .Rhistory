modelName  ="model 1",
modelDescr ="Land use logit model",
indivID    ="Respondent_ID"
)
apollo_beta=c(b_alt1 =0,
b_alt2=0,
b_wald_ =0,
b_groe_ =0,
b_FoUnt_ =0,
b_ConSh_  =0,
b_HaAge_ =0,
b_prei_ =0)
# no fix parameters
apollo_fixed = c()
# to validate:
apollo_inputs = apollo_validateInputs()
apollo_probabilities=function(apollo_beta, apollo_inputs, functionality="estimate"){
apollo_attach(apollo_beta, apollo_inputs)
on.exit(apollo_detach(apollo_beta, apollo_inputs))
P=list()
### List of utilities (later integrated in mnl_settings below)
V = list()
V[['alt1']] = b_alt1 + b_wald_*wald_1 + b_groe_*groe_1 + b_FoUnt_*FoUnt_1 + b_ConSh_*ConSh_1 + b_HaAge_*HaAge_1 + b_prei_*prei_1
V[['alt2']] = b_alt2 + b_wald_*wald_2 + b_groe_*groe_2 + b_FoUnt_*FoUnt_2 + b_ConSh_*ConSh_2 + b_HaAge_*HaAge_2 + b_prei_*prei_2
V[['alt3']] = 0  # utility of opt out, normalized to zero
mnl_settings = list(
alternatives  = c(alt1=1, alt2=2, alt3=3),
avail         = 1,
choiceVar     = choice,
V             = V
)
### Compute probabilities using MNL model
P[['model']] = apollo_mnl(mnl_settings, functionality)
P = apollo_panelProd(P, apollo_inputs, functionality)
P = apollo_prepareProb(P, apollo_inputs, functionality)
return(P)
}
model1 = apollo_estimate(apollo_beta, apollo_fixed,
apollo_probabilities, apollo_inputs,
estimate_settings=list(hessianRoutine="maxLik"))
#library(kableExtra)
#kable(apollo_modelOutput(model1, modelOutput_settings = list(printPVal=T)), digits = 3) %>% kable_styling()
apollo_initialise()
modelOutput_settings = list(printPVal=T)
### Set core controls
apollo_control = list(
modelName  ="model2",
modelDescr ="Land use logit model",
indivID    ="Respondent_ID"
)
apollo_beta=c(b_alt1 =0,  # Alternative specific constant (intercept parameters)
b_alt2 =0,
b_wald_ =0,
b_wald2 =0,
b_groe_ =0,
b_prei_ =0,
b_ConSh_ =0,
b_HaAge_ =0,
b_FoUnt_ =0)
# no fix parameter
apollo_fixed = c()
# validate
apollo_inputs = apollo_validateInputs()
apollo_probabilities=function(apollo_beta, apollo_inputs, functionality="estimate"){
### Attach inputs and detach after function exit
apollo_attach(apollo_beta, apollo_inputs)
on.exit(apollo_detach(apollo_beta, apollo_inputs))
### Create list of probabilities P
P = list()
### List of utilities (later integrated in mnl_settings below)
V = list()
V[['alt1']] = b_alt1 + b_wald_*SQwald_1 + b_wald2*SQwald2_1 + b_groe_*groe_1 + b_FoUnt_*FoUnt_1 + b_ConSh_*ConSh_1 + b_HaAge_*HaAge_1 + b_prei_*prei_1
V[['alt2']] = b_alt2 + b_wald_*SQwald_2 + b_wald2*SQwald2_2 + b_groe_*groe_2 + b_FoUnt_*FoUnt_2 + b_ConSh_*ConSh_2 + b_HaAge_*HaAge_2 + b_prei_*prei_2
V[['alt3']] = 0
### Define settings for MNL model component
mnl_settings = list(
alternatives  = c(alt1=1, alt2=2, alt3=3) ,
avail         = 1, # all alternatives are available in every choice
choiceVar     = choice,
V             = V  # tell function to use list vector defined above
)
### Compute probabilities using MNL model
P[['model']] = apollo_mnl(mnl_settings, functionality)
### Take product across observation for same individual
P = apollo_panelProd(P, apollo_inputs, functionality)
### Average across inter-individual draws - nur bei Mixed Logit!
### P = apollo_avgInterDraws(P, apollo_inputs, functionality)
### Prepare and return outputs of function
P = apollo_prepareProb(P, apollo_inputs, functionality)
return(P)
}
model2 = apollo_estimate(apollo_beta, apollo_fixed,
apollo_probabilities, apollo_inputs,
estimate_settings=list(hessianRoutine="maxLik"))
apollo_initialise()
modelOutput_settings = list(printPVal=T)
### Set core controls
apollo_control = list(
modelName  ="model3",
modelDescr ="Land use logit model",
indivID    ="Respondent_ID"
)
apollo_beta=c(b_alt1 =0,  # Alternative specific constant (intercept parameters)
b_alt2 =0,
b_wald_ =0,
b_wald2 =0,
b_groeHalf =0,
b_groeDouble =0,
b_prei_ =0,
b_FoUnt_  =0,
b_ConSh_ =0,
b_HaAge_ =0,
b_IncXFoUnt_ =0,
b_NatDayXFoUnt_ =0)
### no fix parameter
apollo_fixed = c()
### validieren
apollo_inputs = apollo_validateInputs()
apollo_probabilities=function(apollo_beta, apollo_inputs, functionality="estimate"){
### Function initialisation: do not change the following three commands
### Attach inputs and detach after function exit
apollo_attach(apollo_beta, apollo_inputs)
on.exit(apollo_detach(apollo_beta, apollo_inputs))
### Create list of probabilities P
P = list()
### List of utilities (later integrated in mnl_settings below)
V = list()
V[['alt1']] = b_alt1 + b_wald_*SQwald_1 + b_wald2*SQwald2_1 +  b_groeHalf* groe_1 + b_groeDouble*groe_1 + b_prei_ * prei_1 + b_FoUnt_ * FoUnt_1 + b_ConSh_ * ConSh_1 + b_HaAge_ * HaAge_1 + b_IncXFoUnt_ * (FoUnt_1*IncomeMC) + b_NatDayXFoUnt_ * (FoUnt_1*NatDayMC)
V[['alt2']] = b_alt2 + b_wald_*SQwald_2 + b_wald2*SQwald2_2 + b_groeHalf* groe_2 + b_groeDouble* groe_2 + b_prei_ * prei_2 + b_FoUnt_ * FoUnt_2 + b_ConSh_ * ConSh_2 + b_HaAge_ * HaAge_2 + b_IncXFoUnt_ * (FoUnt_2*IncomeMC) + b_NatDayXFoUnt_ * (FoUnt_2*NatDayMC)
V[['alt3']] = 0   # utility of opt out, normalized to zero
### Define settings for MNL model component
mnl_settings = list(
alternatives  = c(alt1=1, alt2=2, alt3=3) ,
avail         = 1, # all alternatives are available in every choice
choiceVar     = choice,
V             = V  # tell function to use list vector defined above
)
### Compute probabilities using MNL model
P[['model']] = apollo_mnl(mnl_settings, functionality)
### Take product across observation for same individual
P = apollo_panelProd(P, apollo_inputs, functionality)
### Average across inter-individual draws - nur bei Mixed Logit!
### P = apollo_avgInterDraws(P, apollo_inputs, functionality)
### Prepare and return outputs of function
P = apollo_prepareProb(P, apollo_inputs, functionality)
return(P)
}
model3 = apollo_estimate(apollo_beta, apollo_fixed,
apollo_probabilities, apollo_inputs,
estimate_settings=list(hessianRoutine="maxLik"))
devtools::source_gist("1fda3215ee548d64d42b1db78f880ec5")
ls()
rm("apollo_ztest","moveold", "quicktexregapollo_old")
#to remove irrelevant functions
#model1$estimate --> to see the parameter names and the estimates.
#WTP = dividing the attribute parameter by the cost parameter
## include only the attributes for which I want to compute wtp
WTP<- wtp(cost ="b_prei_", attr = "b_FoUnt_",modelname = model3)
allwtp <-wtp(cost="b_prei_", attr = names(model3$estimate), modelname = model3)
# to create a nice looking table
modeltex <- quicktexregapollo(model3,wtpest = allwtp)
View(modeltex)
#LOAD TEXREG
models_tex=list()
#if u want entries in the list you put 2 square brackets
models_tex[["model1"]] <- quicktexregapollo(model=model1)
models_tex[["model2"]] <- quicktexregapollo(model=model2) ##and you do the same for every model - at least 3
models_tex[["model3"]] <- quicktexregapollo(model=model3)
#screenreg(model_tex) ## will just produce an output visible on R, not on the file
#quicktexregapollo(model=model1) transforms the output depending on the texreg function -
texreg(models_tex, custom.model.names=c("Base Model", "No interactions", "With interactions"))
## the names depend on the number of model I decide to estimate
source("logit_model_estimation.R")
#source("logit_model_estimation.R")
source("path/to/logit_model_estimation.R")
help("source")
setwd("logit_model_estimation.R")
source("~/.active-rstudio-document")
library(dplyr)
rm(list=ls())
#install.packages("devtools")
#install.packages("texreg")
#install.packages("janitor")
library(dplyr)
library(apollo)
library(haven)
library(tidyverse)
library(labelled)
library(devtools)
library(texreg)
library(janitor)
#READ THE DATA
database <- database <- readRDS("C:/Users/franc/OneDrive/Desktop/Project_ResourceEco/Data/database.rds")
#REARRANGING THE DATA
database <- database %>% arrange(Respondent_ID) %>% drop_na(PINC) %>% mutate(IncomeMC = PINC - mean(PINC))
database <- database %>% arrange(Respondent_ID) %>% drop_na(f006) %>% mutate(NatDayMC = f006 - mean(f006))
summary(database$IncomeMC)
### the parameters will be the same
# INSPECTING THE DATABASE
#View(database)
#names(database)
#summary(database)
#choice is the choice variable
#table(database$choice)
#  1    2    3
#2450 2669 6284 how many times each choice has been selected
#Respondent_ID is the identifier variable
#length(unique(database$Respondent_ID))
#1267 the number of respondents
#summary(database$prei_2)
#table(database$wald_1)
#table(database$wald_3)
#RECODING VARIABLES
#Recoding wald_:
# 1 is 10% less
# 2 is 10% more
# the function is not linear - is going up and down
database <- database %>% mutate(wald_1 = case_when(wald_1 == 0 ~ 1, wald_1 == 1 ~ 0,
wald_1 == 2 ~ 2),
wald_2 = case_when(wald_2 == 0 ~ 1, wald_2 == 1 ~ 0,
wald_2 == 2 ~ 2),
wald_3 = 1)
#Recode groe_:
# 0 --> like today
# 1 --> half as much,
# 2 --> twice as much
database <- database %>% mutate(groe_1 = case_when(groe_1 == 0 ~ 1, groe_1 == 1 ~ 0,
groe_1 == 2 ~ 2),
groe_2 = case_when(groe_2 == 0 ~ 1, groe_2 == 1 ~ 0,
groe_2 == 2 ~ 2),
groe_3 = 1)
#Recode Understorey in forests - FoUnt_
# 0 --> like today
# 1 --> half as much,
# 2 --> twice as much
database <- database %>% mutate(FoUnt_1 = case_when(FoUnt_1 == 0 ~ 1, FoUnt_1 == 1 ~ 0,
FoUnt_1 == 2 ~ 2),
FoUnt_2 = case_when(FoUnt_2 == 0 ~ 1, FoUnt_2 == 1 ~ 0,
FoUnt_2 == 2 ~ 2),
FoUnt_3 = 1)
#Recode Coniferous trees - ConSh_
# 1 --> 30% coniferous trees
# 2 --> 70% coniferous trees
database <- database %>% mutate(ConSh_1 = case_when(ConSh_1 == 0 ~ 1, ConSh_1 == 1 ~ 0,
ConSh_1 == 2 ~ 2),
ConSh_2 = case_when(ConSh_2 == 0 ~ 1, ConSh_2 == 1 ~ 0,
ConSh_2 == 2 ~ 2),
ConSh_3 = 1)
#Can be now used to estimate the Model with interaction terms such that it (WTP) is comparable with non-interacting models.
# Basic logit model creation - MODEL 1
apollo_initialise()
modelOutput_settings = list(printPVal=T)
### Set core controls
apollo_control = list(
modelName  ="model 1",
modelDescr ="Land use logit model",
indivID    ="Respondent_ID"
)
apollo_beta=c(b_alt1 =0,
b_alt2=0,
b_wald_ =0,
b_groe_ =0,
b_FoUnt_ =0,
b_ConSh_  =0,
b_HaAge_ =0,
b_prei_ =0)
# no fix parameters
apollo_fixed = c()
# to validate:
apollo_inputs = apollo_validateInputs()
apollo_probabilities=function(apollo_beta, apollo_inputs, functionality="estimate"){
apollo_attach(apollo_beta, apollo_inputs)
on.exit(apollo_detach(apollo_beta, apollo_inputs))
P=list()
### List of utilities (later integrated in mnl_settings below)
V = list()
V[['alt1']] = b_alt1 + b_wald_*wald_1 + b_groe_*groe_1 + b_FoUnt_*FoUnt_1 + b_ConSh_*ConSh_1 + b_HaAge_*HaAge_1 + b_prei_*prei_1
V[['alt2']] = b_alt2 + b_wald_*wald_2 + b_groe_*groe_2 + b_FoUnt_*FoUnt_2 + b_ConSh_*ConSh_2 + b_HaAge_*HaAge_2 + b_prei_*prei_2
V[['alt3']] = 0  # utility of opt out, normalized to zero
mnl_settings = list(
alternatives  = c(alt1=1, alt2=2, alt3=3),
avail         = 1,
choiceVar     = choice,
V             = V
)
### Compute probabilities using MNL model
P[['model']] = apollo_mnl(mnl_settings, functionality)
P = apollo_panelProd(P, apollo_inputs, functionality)
P = apollo_prepareProb(P, apollo_inputs, functionality)
return(P)
}
model1 = apollo_estimate(apollo_beta, apollo_fixed,
apollo_probabilities, apollo_inputs,
estimate_settings=list(hessianRoutine="maxLik"))
#library(kableExtra)
#kable(apollo_modelOutput(model1, modelOutput_settings = list(printPVal=T)), digits = 3) %>% kable_styling()
# Modification 1 - MODEL 2
## Include squared functional forms in order to display diminishing marginal utility - for wald, groe
apollo_initialise()
modelOutput_settings = list(printPVal=T)
### Set core controls
apollo_control = list(
modelName  ="model2",
modelDescr ="Land use logit model",
indivID    ="Respondent_ID"
)
apollo_beta=c(b_alt1 =0,  # Alternative specific constant (intercept parameters)
b_alt2 =0,
b_wald_ =0,
b_wald2 =0,
b_groe_ =0,
b_prei_ =0,
b_ConSh_ =0,
b_HaAge_ =0,
b_FoUnt_ =0)
# no fix parameter
apollo_fixed = c()
# validate
apollo_inputs = apollo_validateInputs()
apollo_probabilities=function(apollo_beta, apollo_inputs, functionality="estimate"){
### Attach inputs and detach after function exit
apollo_attach(apollo_beta, apollo_inputs)
on.exit(apollo_detach(apollo_beta, apollo_inputs))
### Create list of probabilities P
P = list()
### List of utilities (later integrated in mnl_settings below)
V = list()
V[['alt1']] = b_alt1 + b_wald_*SQwald_1 + b_wald2*SQwald2_1 + b_groe_*groe_1 + b_FoUnt_*FoUnt_1 + b_ConSh_*ConSh_1 + b_HaAge_*HaAge_1 + b_prei_*prei_1
V[['alt2']] = b_alt2 + b_wald_*SQwald_2 + b_wald2*SQwald2_2 + b_groe_*groe_2 + b_FoUnt_*FoUnt_2 + b_ConSh_*ConSh_2 + b_HaAge_*HaAge_2 + b_prei_*prei_2
V[['alt3']] = 0
### Define settings for MNL model component
mnl_settings = list(
alternatives  = c(alt1=1, alt2=2, alt3=3) ,
avail         = 1, # all alternatives are available in every choice
choiceVar     = choice,
V             = V  # tell function to use list vector defined above
)
### Compute probabilities using MNL model
P[['model']] = apollo_mnl(mnl_settings, functionality)
### Take product across observation for same individual
P = apollo_panelProd(P, apollo_inputs, functionality)
### Prepare and return outputs of function
P = apollo_prepareProb(P, apollo_inputs, functionality)
return(P)
}
model2 = apollo_estimate(apollo_beta, apollo_fixed,
apollo_probabilities, apollo_inputs,
estimate_settings=list(hessianRoutine="maxLik"))
# Modification 2 - MODEL 3
##Include Interaction terms:
#Relevant in order to account for possible omitted variable bias etc. + also possibility to make a difference to the original paper
apollo_initialise()
modelOutput_settings = list(printPVal=T)
### Set core controls
apollo_control = list(
modelName  ="model3",
modelDescr ="Land use logit model",
indivID    ="Respondent_ID"
)
apollo_beta=c(b_alt1 =0,  # Alternative specific constant (intercept parameters)
b_alt2 =0,
b_wald_ =0,
b_wald2 =0,
b_groeHalf =0,
b_groeDouble =0,
b_prei_ =0,
b_FoUnt_  =0,
b_ConSh_ =0,
b_HaAge_ =0,
b_IncXFoUnt_ =0,
b_NatDayXFoUnt_ =0)
### no fix parameter
apollo_fixed = c()
### validieren
apollo_inputs = apollo_validateInputs()
apollo_probabilities=function(apollo_beta, apollo_inputs, functionality="estimate"){
### Function initialisation: do not change the following three commands
### Attach inputs and detach after function exit
apollo_attach(apollo_beta, apollo_inputs)
on.exit(apollo_detach(apollo_beta, apollo_inputs))
### Create list of probabilities P
P = list()
### List of utilities (later integrated in mnl_settings below)
V = list()
V[['alt1']] = b_alt1 + b_wald_*SQwald_1 + b_wald2*SQwald2_1 +  b_groeHalf* groe_1 + b_groeDouble*groe_1 + b_prei_ * prei_1 + b_FoUnt_ * FoUnt_1 + b_ConSh_ * ConSh_1 + b_HaAge_ * HaAge_1 + b_IncXFoUnt_ * (FoUnt_1*IncomeMC) + b_NatDayXFoUnt_ * (FoUnt_1*NatDayMC)
V[['alt2']] = b_alt2 + b_wald_*SQwald_2 + b_wald2*SQwald2_2 + b_groeHalf* groe_2 + b_groeDouble* groe_2 + b_prei_ * prei_2 + b_FoUnt_ * FoUnt_2 + b_ConSh_ * ConSh_2 + b_HaAge_ * HaAge_2 + b_IncXFoUnt_ * (FoUnt_2*IncomeMC) + b_NatDayXFoUnt_ * (FoUnt_2*NatDayMC)
V[['alt3']] = 0   # utility of opt out, normalized to zero
### Define settings for MNL model component
mnl_settings = list(
alternatives  = c(alt1=1, alt2=2, alt3=3) ,
avail         = 1, # all alternatives are available in every choice
choiceVar     = choice,
V             = V  # tell function to use list vector defined above
)
### Compute probabilities using MNL model
P[['model']] = apollo_mnl(mnl_settings, functionality)
### Take product across observation for same individual
P = apollo_panelProd(P, apollo_inputs, functionality)
### Prepare and return outputs of function
P = apollo_prepareProb(P, apollo_inputs, functionality)
return(P)
}
model3 = apollo_estimate(apollo_beta, apollo_fixed,
apollo_probabilities, apollo_inputs,
estimate_settings=list(hessianRoutine="maxLik"))
### Investigating the WTP
devtools::source_gist("1fda3215ee548d64d42b1db78f880ec5")
ls()
rm("apollo_ztest","moveold", "quicktexregapollo_old")
#to remove irrelevant functions
#model1$estimate --> to see the parameter names and the estimates.
#WTP = dividing the attribute parameter by the cost parameter
## include only the attributes for which I want to compute wtp
WTP<- wtp(cost ="b_prei_", attr = "b_FoUnt_",modelname = model3)
allwtp <-wtp(cost="b_prei_", attr = names(model3$estimate), modelname = model3)
# to create a nice looking table
modeltex <- quicktexregapollo(model3,wtpest = allwtp)
View(modeltex)
#{r, results='asis', include=TRUE}
#LOAD TEXREG
models_tex=list()
#if u want entries in the list you put 2 square brackets
models_tex[["model1"]] <- quicktexregapollo(model=model1)
models_tex[["model2"]] <- quicktexregapollo(model=model2) ##and you do the same for every model - at least 3
models_tex[["model3"]] <- quicktexregapollo(model=model3)
#screenreg(model_tex) ## will just produce an output visible on R, not on the file
#quicktexregapollo(model=model1) transforms the output depending on the texreg function -
texreg(models_tex, custom.model.names=c("Base Model", "No interactions", "With interactions"))
## the names depend on the number of model I decide to estimate
source("C:/Users/franc/OneDrive/Desktop/Project_ResourceEco/wtp.R")
source("C:/Users/franc/OneDrive/Desktop/Project_ResourceEco/models.R")
source("C:/Users/franc/OneDrive/Desktop/Project_ResourceEco/adjustdata.R")
source("C:/Users/franc/OneDrive/Desktop/Project_ResourceEco/startup.R")
source("C:/Users/franc/OneDrive/Desktop/Project_ResourceEco/startup.R")
source("C:/Users/franc/OneDrive/Desktop/Project_ResourceEco/adjustdata.R")
source("C:/Users/franc/OneDrive/Desktop/Project_ResourceEco/models.R")
source("C:/Users/franc/OneDrive/Desktop/Project_ResourceEco/wtp.R")
View(WTP)
source("C:/Users/franc/OneDrive/Desktop/Project_ResourceEco/startup.R")
source("C:/Users/franc/OneDrive/Desktop/Project_ResourceEco/adjustdata.R")
source("C:/Users/franc/OneDrive/Desktop/Project_ResourceEco/models.R")
source("C:/Users/franc/OneDrive/Desktop/Project_ResourceEco/wtp.R")
knitr::opts_chunk$set(echo = FALSE, include=FALSE)
source("C:/Users/franc/OneDrive/Desktop/Project_ResourceEco/startup.R")
source("C:/Users/franc/OneDrive/Desktop/Project_ResourceEco/adjustdata.R")
source("C:/Users/franc/OneDrive/Desktop/Project_ResourceEco/models.R")
source("C:/Users/franc/OneDrive/Desktop/Project_ResourceEco/wtp.R")
knitr::opts_chunk$set(echo = FALSE, include=FALSE)
models_tex=list()
models_tex[["model1"]] <- quicktexregapollo(model1)
models_tex[["model2"]] <- quicktexregapollo(model2)
models_tex[["model3"]] <- quicktexregapollo(model3)
screenreg(models_tex, digits=4)
texreg(models_tex ,custom.model.names = c("Base Model", "No Interaction" , "With interactions"))
View(allwtp)
knitr::opts_chunk$set(echo = FALSE, include=FALSE)
source("C:/Users/franc/OneDrive/Desktop/Project_ResourceEco/startup.R")
source("C:/Users/franc/OneDrive/Desktop/Project_ResourceEco/adjustdata.R")
source("C:/Users/franc/OneDrive/Desktop/Project_ResourceEco/models.R")
source("C:/Users/franc/OneDrive/Desktop/Project_ResourceEco/wtp.R")
source("C:/Users/franc/OneDrive/Desktop/Project_ResourceEco/lib.bib")
allwtp
allwtp <-wtp(cost="b_prei_", attr = names(model1$estimate), modelname = model3)
summary(model3)
V[['alt1']] = b_alt1 + b_wald_*SQwald_1 + b_wald2*SQwald2_1 + b_groe_*groe_1 + b_FoUnt_*FoUnt_1 + b_ConSh_*ConSh_1 + b_HaAge_*HaAge_1 + b_prei_*prei_1
knitr::opts_chunk$set(echo = FALSE, include=FALSE)
source("C:/Users/franc/OneDrive/Desktop/Project_ResourceEco/startup.R")
source("C:/Users/franc/OneDrive/Desktop/Project_ResourceEco/adjustdata.R")
source("C:/Users/franc/OneDrive/Desktop/Project_ResourceEco/models.R")
source("C:/Users/franc/OneDrive/Desktop/Project_ResourceEco/wtp.R")
allwtp
summary(model2)
texreg(models_tex ,custom.model.names = c("Base Model", "No Interaction" , "With interactions"))
source("C:/Users/franc/OneDrive/Desktop/Project_ResourceEco/startup.R")
source("C:/Users/franc/OneDrive/Desktop/Project_ResourceEco/adjustdata.R")
source("C:/Users/franc/OneDrive/Desktop/Project_ResourceEco/models.R")
source("C:/Users/franc/OneDrive/Desktop/Project_ResourceEco/wtp.R")
knitr::opts_chunk$set(echo = FALSE, include=FALSE)
models_tex=list()
models_tex[["model1"]] <- quicktexregapollo(model1)
models_tex[["model2"]] <- quicktexregapollo(model2)
models_tex[["model3"]] <- quicktexregapollo(model3)
screenreg(models_tex, digits=4)
texreg(models_tex ,custom.model.names = c("Base Model", "No Interaction" , "With interactions"))
knitr::opts_chunk$set(echo = FALSE, include=FALSE)
source("startup.R")
source("adjustdata.R")
source("models.R")
source("wtp.R")
models_tex=list()
models_tex[["model1"]] <- quicktexregapollo(model1)
models_tex[["model2"]] <- quicktexregapollo(model2)
models_tex[["model3"]] <- quicktexregapollo(model3)
screenreg(models_tex, digits=4)
texreg(models_tex ,custom.model.names = c("Base Model", "No Interaction" , "With interactions"))
models_tex <- quicktexregapollo(model3,wtpest = allwtp)
texreg(models_tex, caption = "Willingness to pay")
screenreg(model3)
knitr::opts_chunk$set(echo = FALSE, include=FALSE)
source("startup.R")
source("adjustdata.R")
source("models.R")
source("wtp.R")
screenreg(model1)
screenreg(model1, model2, model3)
screenreg(model2)
screenreg(model3)
summary(WTP)
View(WTP)
screenreg(allwtp)
allwtp
allwtp(model3)
